// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// voucher thêm trực tiếp vào voucher inventory của user gốc, item thêm vào inventory của game-profile
// https://prismaliser.app/

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  users     User[]
  // Company   Company?
  company   String[]
  eventId   Int?       

  lives     Int     @default(3)
  isDeleted Boolean @default(false)
}

model Item {
  id            Int             @id @default(autoincrement())
  name          String
  image         String          @default("https://dummyimage.com/96x96/000/fff&text=Item")
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  InventoryItem InventoryItem[]
  games         Game[]
  Transaction   Transaction[]
  isDeleted     Boolean         @default(false)
}

model User {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Game            Game          @relation(fields: [gameId], references: [id])
  lives           Int           @default(3)
  Sent            Transaction[] @relation("Sender")
  Received        Transaction[] @relation("Receiver")
  Inventory       Inventory     @relation(fields: [inventoryId], references: [id])
  inventoryId     Int           @unique
  gameId          Int
  RequestSent     Request[]     @relation("Request Sender")
  RequestReceived Request[]     @relation("Request Receiver")
  isDeleted       Boolean       @default(false)
  Redeem          Redeem[]
  authUserId      Int           @default(autoincrement())

  @@unique([gameId, authUserId])
}

model Inventory {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  InventoryItem InventoryItem[]
  User          User?
  isDeleted     Boolean         @default(false)
}

model InventoryItem {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Item         Item          @relation(fields: [itemId], references: [id])
  itemId       Int
  Inventory    Inventory     @relation(fields: [inventoryId], references: [id])
  inventoryId  Int
  amount       Int?
  transactions Transaction[]
  isDeleted    Boolean       @default(false)
}

model Transaction {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  InventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId Int
  Item            Item?         @relation(fields: [itemId], references: [id])
  itemId          Int?
  Sender          User          @relation(fields: [senderId], references: [id], name: "Sender")
  senderId        Int
  Receiver        User          @relation(fields: [receiverId], references: [id], name: "Receiver")
  receiverId      Int
  isDeleted       Boolean       @default(false)
}

model Request {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Sender     User     @relation(fields: [senderId], references: [id], name: "Request Sender")
  senderId   Int
  Receiver   User     @relation(fields: [receiverId], references: [id], name: "Request Receiver")
  receiverId Int
  isAccepted Boolean  @default(false)
  isDeleted  Boolean  @default(false)
}

model Redeem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  isDeleted Boolean  @default(false)
}
